---
- name: "{{ app_name }} Create Workdir"
  ansible.builtin.file:
    path: '{{ compose_workdir }}'
    state: directory
    mode: 0644
    group: docker

- name: "{{ app_name }} Copy Context"
  ansible.builtin.copy:
    src: "{{ compose_source }}"
    dest: "{{ compose_workdir }}"
    mode: 0644
  # no_log: true

- name: "{{ app_name }} Create env file"
  ansible.builtin.template:
    src: vars.env
    dest: "{{ compose_workdir }}/{{ item.key }}"
    mode: 0644
  with_dict: "{{ compose_vars }}"
  # no_log: true

- name: "{{ app_name }} Creating external volumes"
  community.docker.docker_volume:
    name: "{{ item }}"
  with_items: "{{ create_external_volumes }}"
  when: create_external_volumes is defined and create_external_volumes|length>0

- name: "{{ app_name }} Log into docker registry"
  community.docker.docker_login:
    username: "{{ docker_registry_username }}"
    password: "{{ docker_registry_password }}"
    registry_url: "{{ docker_registry_url }}"
  when: docker_registry_url is defined
  changed_when: false

- name: "{{ app_name }} Start service"
  community.docker.docker_compose:
    project_src: "{{ compose_workdir }}"
    pull: true
    recreate: smart
    state: present
  register: service_status

- name: "{{ app_name }} Logout from docker registry"
  ansible.builtin.command: docker logout "{{ docker_registry_url }}"
  when: docker_registry_url is defined
  changed_when: false

- name: "{{ app_name }} Copy systemd files"
  ansible.builtin.template:
    src: service.unit
    dest: /etc/systemd/system/{{ app_name }}.service
    mode: 0644
  register: systemd_service

- name: "{{ app_name }} Reload"
  ansible.builtin.systemd:
    daemon_reload: true
  when: systemd_service.changed

- name: "{{ app_name }} Restart services"
  ansible.builtin.systemd:
    name: "{{ app_name }}.service"
    state: restarted
    enabled: true
  when: systemd_service.changed or service_status.changed

- name: "{{ app_name }} Enable services"
  ansible.builtin.service:
    name: "{{ app_name }}.service"
    enabled: true
    state: started
  when: not (systemd_service.changed and service_status.changed)

- name: "{{ app_name }} Wait for service"
  ansible.builtin.pause:
    seconds: "{{ wait_for_service_timeout }}"
  when: (systemd_service.changed or service_status.changed) and wait_for_service_timeout
